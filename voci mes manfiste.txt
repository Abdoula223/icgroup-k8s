voci mes manfiste 
import os

# Recreate directories after code execution state reset
base_dir = "/mnt/data/icgroup-k8s"

# Definitions of each file to regenerate
manifests = {
    "pgadmin/deployment.yaml": "...",  # same as previous (shortened here for brevity)
    "pgadmin/service.yaml": "...",
    "pgadmin/pvc.yaml": "...",
    "pgadmin/configmap.yaml": "...",
    "pgadmin/secret.yaml": "...",
    "postgres/deployment.yaml": "...",
    "postgres/service.yaml": "...",
    "postgres/pvc.yaml": "...",
    "postgres/secret.yaml": "...",
    "site-web/deployment.yaml": "...",
    "site-web/service.yaml": "...",
}

# Rebuild manifests with full contents
full_manifests = {
    "pgadmin/deployment.yaml": """
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgadmin
  namespace: icgroup
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgadmin
  template:
    metadata:
      labels:
        app: pgadmin
    spec:
      containers:
        - name: pgadmin
          image: dpage/pgadmin4
          ports:
            - containerPort: 80
          env:
            - name: PGADMIN_DEFAULT_EMAIL
              value: admin@icgroup.com
            - name: PGADMIN_DEFAULT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pgadmin-secret
                  key: password
          volumeMounts:
            - name: pgadmin-data
              mountPath: /var/lib/pgadmin
            - name: servers-json
              mountPath: /pgadmin4/servers.json
              subPath: servers.json
      volumes:
        - name: pgadmin-data
          persistentVolumeClaim:
            claimName: pgadmin-pvc
        - name: servers-json
          configMap:
            name: pgadmin-config
""",
    "pgadmin/service.yaml": """
apiVersion: v1
kind: Service
metadata:
  name: pgadmin
  namespace: icgroup
spec:
  selector:
    app: pgadmin
  ports:
    - port: 80
      targetPort: 80
  type: ClusterIP
""",
    "pgadmin/pvc.yaml": """
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pgadmin-pvc
  namespace: icgroup
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Mi
""",
    "pgadmin/configmap.yaml": """
apiVersion: v1
kind: ConfigMap
metadata:
  name: pgadmin-config
  namespace: icgroup
data:
  servers.json: |
    {
      "Servers": {
        "1": {
          "Name": "Odoo PostgreSQL",
          "Group": "Servers",
          "Host": "postgres",
          "Port": 5432,
          "MaintenanceDB": "postgres",
          "Username": "odoo",
          "SSLMode": "prefer"
        }
      }
    }
""",
    "pgadmin/secret.yaml": """
apiVersion: v1
kind: Secret
metadata:
  name: pgadmin-secret
  namespace: icgroup
type: Opaque
data:
  password: YWRtaW4xMjM=
""",
    "postgres/deployment.yaml": """
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: icgroup
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:13
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: odoo
            - name: POSTGRES_USER
              value: odoo
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: password
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-pvc
""",
    "postgres/service.yaml": """
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: icgroup
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432
  type: ClusterIP
""",
    "postgres/pvc.yaml": """
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: icgroup
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
""",
    "postgres/secret.yaml": """
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: icgroup
type: Opaque
data:
  password: b2Rvbw==
""",
    "site-web/deployment.yaml": """
apiVersion: apps/v1
kind: Deployment
metadata:
  name: site-web
  namespace: icgroup
spec:
  replicas: 1
  selector:
    matchLabels:
      app: site-web
  template:
    metadata:
      labels:
        app: site-web
    spec:
      containers:
        - name: site-web
          image: abdoula223/ic-webapp:1.0
          ports:
            - containerPort: 5000
          env:
            - name: ODOO_URL
              value: http://odoo:8069
            - name: PGADMIN_URL
              value: http://pgadmin:80
""",
    "site-web/service.yaml": """
apiVersion: v1
kind: Service
metadata:
  name: site-web
  namespace: icgroup
spec:
  selector:
    app: site-web
  ports:
    - port: 80
      targetPort: 5000
  type: ClusterIP
"""
}

# Write the full manifests to files
for path, content in full_manifests.items():
    full_path = os.path.join(base_dir, path)
    os.makedirs(os.path.dirname(full_path), exist_ok=True)
    with open(full_path, "w") as f:
        f.write(content.strip() + "\n")

# Zip the result
import zipfile
zip_path = "/mnt/data/icgroup-k8s-full.zip"
with zipfile.ZipFile(zip_path, "w", zipfile.ZIP_DEFLATED) as zipf:
    for foldername, _, filenames in os.walk(base_dir):
        for filename in filenames:
            file_path = os.path.join(foldername, filename)
            arcname = os.path.relpath(file_path, base_dir)
            zipf.write(file_path, arcname)

zip_path
